The solution involves using prepared statements or parameterized queries. This approach prevents SQL injection by treating user input as data, not as executable code.

```php
<?php
$id = $_GET['id'];

// Prepare the statement
trying {
    $stmt = $pdo->prepare("SELECT * FROM users WHERE id = ?");
    $stmt->execute([$id]); // Use a placeholder for the parameter
    $results = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e){
    echo "Error: " . $e->getMessage();
}

// ... process results ...
?>
```

This prevents direct insertion of user data into the query, eliminating the risk of SQL injection.  Make sure to use appropriate error handling and input validation to ensure the application is secure.